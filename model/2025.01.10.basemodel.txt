//Base Model - has observer simply calculated

data {
  int<lower=0> N; // number of rows
  int<lower=1> S; // number of species
  int<lower=1> R; // number of routes
  int<lower=1> Y; // number of years
  int<lower=1> O; // number of observers
  array[N] int<lower=1, upper=S> species; // there is a species for every row and it's an integer between 1 and S
  array[N] int<lower=1, upper=R> route;  // there is a route for every row and it's an integer between 1 and R
  array[N] int<lower=1, upper=Y> year;  // there is an integer for every year and it's an integer between 1 and Y
  array[N] int<lower=1, upper=O> observer_ID;  // there is an observer_ID for every row and it is in integer between 1 and 'O'(not a zero)
  // vector[N] real observer_quality;  // there is an observer quality for every row and it is a real number, because it is continuous it can be a vector instead of an array
  array[N] int<lower=0> C;  // there is a count (my y variable!) for every row and it is an unbounded integer that is at least 0.
}

parameters {
  vector[S] b;
  matrix[R, S] a;
  real a_bar;
  real<lower=0> sigma;
  vector[O] c;
  real<lower=0> tau_c;
}

model {
  a_bar ~ normal(1, 0.5);
  sigma ~ exponential(1);
  b ~ normal(0, 0.2);
  to_vector(a) ~ normal(a_bar, sigma);
  c ~ normal(0, tau_c);
  tau_c ~ gamma(.001, .001);

// So one thing to fix here: this is the 'unvectorized' version of this model. vecteroize and just remove all the n. 
// Why is this poisson log?
// This is poisson_log bc then the predictor does not need to be exponentiated
// Why does this not include the.....no. Okay, doesn't need a sigma bc its a poisson and poisson distributions only have a lambda parameter.

// vectorized (supposedly) version I tried that doesn't work
//  C ~ poisson_log(a[route,species] + b[species] .* year + c[observer_ID]);

// Non-vectorized, so slower than it could be. Let's ignore speed and work on content.
   for (n in 1:N) {
     C[n] ~ poisson_log(a[route[n], species[n]] + b[species[n]] * year[n] + c[observer_ID[n]]);
   }
}

// um, for right now, let's leave the generated quantities alone.
generated quantities {
  real log_lik[N];
  for (n in 1:N) {
    log_lik[n] = poisson_log_lpmf(C[n] | a[route[n], species[n]] + b[species[n]] * year[n] + c[observer_ID[n]]);
  }
}